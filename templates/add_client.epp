<%- | String  $client_hostname,
      String  $gpfs_master,
      Array   $nodeclasses,
      String  $pagepool,
      Integer $pagepool_max_ram_percent,
      String  $script_fn,
      String  $ssh_private_key_contents,
      String  $ssh_private_key_path,
| -%>
#!/bin/bash

DEBUG=1
[[ $DEBUG -gt 0 ]] && set -x

CAT=$(command -v cat)
CHMOD=$(command -v chmod)
FN_SSHKEY="<%= $ssh_private_key_path%>"
MMBIN=/usr/lpp/mmfs/bin
NODE=<%= $client_hostname %>
RM=$(command -v rm)
SSH=$(command -v ssh)
SSHCOMMAND="$SSH -o StrictHostKeyChecking=no -i $FN_SSHKEY <%= $gpfs_master %>"
TOUCH=$(command -v touch)


die() {
  echo "ERROR $*" >&2
  exit 99
}


warn() {
  echo "WARN $*" >&2
}


log() {
  echo "INFO $*"
}


setup() {
  [[ $DEBUG -gt 0 ]] && set -x
  $TOUCH $FN_SSHKEY
  $CHMOD 600 $FN_SSHKEY
  $CAT >$FN_SSHKEY <<< "<%= $ssh_private_key_contents %>"
}


is_node_in_cluster() {
  [[ $DEBUG -gt 0 ]] && set -x
  $SSHCOMMAND "$MMBIN/mmlscluster | grep -q $NODE"
}


ensure_node_is_in_cluster() {
  [[ $DEBUG -gt 0 ]] && set -x
  if is_node_in_cluster ; then
    $SSHCOMMAND "$MMBIN/mmsdrrestore -N $NODE" \
    || die "error while attempting to restore gpfs cluster config file"
  else
    add_node_to_cluster
    sleep 1
    is_node_in_cluster || die "failed to add node to gpfs cluster"
  fi
}


rm_node_from_cluster() {
  [[ $DEBUG -gt 0 ]] && set -x
  is_node_in_cluster || return 0
  $SSHCOMMAND "$MMBIN/mmdelnode -N $NODE"
  sleep 1
  is_node_in_cluster && die "failed to remove previous node registration"
}


add_node_to_cluster() {
  [[ $DEBUG -gt 0 ]] && set -x
  $SSHCOMMAND "$MMBIN/mmaddnode -N $NODE"
}


node_has_license() {
  [[ $DEBUG -gt 0 ]] && set -x
  $SSHCOMMAND "$MMBIN/mmlslicense -L | grep $NODE | grep -F '*'"
  [[ $? -ne 0 ]]
}


accept_license() {
  [[ $DEBUG -gt 0 ]] && set -x
  node_has_license && return 0
  $SSHCOMMAND "$MMBIN/mmchlicense client --accept -N $NODE"
  sleep 1
  node_has_license || warn "failed to accept gpfs client license"
}


configure_pagepool() {
  [[ $DEBUG -gt 0 ]] && set -x
  local _cfg_parts=()
  local _cfg

  <% if $pagepool =~ String[1] { -%>
  log "Setting pagepool to <%= $pagepool %>"
  _cfg_parts+=( "pagepool=<%= $pagepool %>" )
  <% } -%>

  <% if $pagepool_max_ram_percent =~ Integer[10,90] { -%>
  log "Setting pagepoolMaxPhysMemPct to <%= $pagepool_max_ram_percent %>"
  _cfg_parts+=( "pagepoolMaxPhysMemPct=<%= $pagepool_max_ram_percent %>" )
  <% } -%>

  if [[ ${#_cfg_parts[@]} -gt 0 ]] ; then
    _cfg="$( IFS=','; cat <<< "${_cfg_parts[*]}" )"
    $SSHCOMMAND "$MMBIN/mmchconfig ${_cfg} -N $NODE"
  fi

}


is_node_in_class() {
  [[ $DEBUG -gt 0 ]] && set -x
  local _nodeclass="$1"
  $SSHCOMMAND "$MMBIN/mmlsnodeclass $_nodeclass | grep -q $NODE"
}


add_node_to_class() {
  [[ $DEBUG -gt 0 ]] && set -x
  local _nodeclass="$1"
  is_node_in_class "$_nodeclass" && return 0
  $SSHCOMMAND "$MMBIN/mmchnodeclass $_nodeclass add -N $NODE"
  sleep 1
  is_node_in_class
}


cleanup() {
  [[ $DEBUG -gt 0 ]] && set -x
  # Remove ssh key
  $RM -f $FN_SSHKEY

  # Remove this file
  $RM -f <%= $script_fn %>
}


setup

ensure_node_is_in_cluster

accept_license

configure_pagepool

# Add node to any nodeclasses
<% $nodeclasses.each |$classname| { %> 
  add_node_to_class <%= $classname %>
<% } -%>

cleanup
